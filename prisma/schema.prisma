generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  username     String     @unique
  email        String     @unique
  passwordHash String     @map("password_hash")
  role         Role       @default(Student)
  createdAt    DateTime   @default(now()) @map("created_at")
  imagePath    String     @default("/profile_default.jpg") @map("image_path")
  id           Int        @id @default(autoincrement())
  answers      Answer[]
  comments     Comment[]
  questions    Question[]
  votes        Vote[]

  @@map("User")
}

model Question {
  title        String
  description  String
  isDraft      Boolean       @map("is_draft")
  createdAt    DateTime      @default(now()) @map("created_at")
  id           Int           @id @default(autoincrement())
  userId       Int           @map("user_id")
  bestAnswerId Int?          @unique @map("best_answer_id")
  answers      Answer[]      @relation("AllAnswers")
  comments     Comment[]
  answer       Answer?       @relation("BestAnswer", fields: [bestAnswerId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  questionTags QuestionTag[]

  @@map("Question")
}

model Answer {
  content         String
  createdAt       DateTime  @default(now()) @map("created_at")
  id              Int       @id @default(autoincrement())
  questionId      Int       @map("question_id")
  userId          Int       @map("user_id")
  question        Question  @relation("AllAnswers", fields: [questionId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  comments        Comment[]
  bestForQuestion Question? @relation("BestAnswer")
  votes           Vote[]

  @@map("Answer")
}

model Vote {
  type     String
  id       Int    @id @default(autoincrement())
  answerId Int    @map("answer_id")
  userId   Int    @map("user_id")
  answer   Answer @relation(fields: [answerId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@map("Vote")
}

model Tag {
  name      String
  id        Int           @id @default(autoincrement())
  questions QuestionTag[]

  @@map("Tag")
}

model QuestionTag {
  questionId Int      @map("question_id")
  tagId      Int      @map("tag_id")
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@map("QuestionTag")
}

model Comment {
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  id         Int      @id @default(autoincrement())
  questionId Int      @map("question_id")
  answerId   Int?     @map("answer_id")
  userId     Int      @map("user_id")
  answer     Answer?  @relation(fields: [answerId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("Comment")
}

enum Role {
  Student
  Admin
}
