// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Student
  Admin
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  imagePath    String   @default("/profile_default.jpg") @map("image_path")
  passwordHash String   @map("password_hash")
  role         Role     @default(Student)
  createdAt    DateTime @default(now()) @map("created_at")

//  accounts     Account[]
  questions    Question[]
  answers      Answer[]
  comments     Comment[]
  votes        Vote[]

  @@map("User")
}

// model Account {
//  id                 String  @id @default(cuid())
//  userId             String
//  type               String
//  provider           String
//  providerAccountId  String
//  refresh_token      String?
//  access_token       String?
//  expires_at         Int?
//  token_type         String?
//  scope              String?
//  id_token           String?
//  session_state      String?

//  user User @relation(fields: [userId], references: [id])

//  @@unique([provider, providerAccountId])
//}


model Question {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  tags        Int[]    @db.IntegerArray
  isDraft       Boolean  @map("is_draft")
  createdAt     DateTime @default(now()) @map("created_at")

  // リレーション
  userId        Int      @map("user_id")
  user          User     @relation(fields: [userId], references: [id])

  bestAnswerId  Int?     @unique @map("best_answer_id")
  answer        Answer?  @relation("BestAnswer",fields: [bestAnswerId], references: [id])

  answers       Answer[] @relation("AllAnswers")
  comments      Comment[]
  tags          QuestionTag[]

  @@map("Question") // 念のため
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now()) @map("created_at")

  // リレーション
  questionId Int      @map("question_id")
  question   Question @relation("AllAnswers", fields: [questionId], references: [id])

  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])

  comments   Comment[]
  votes      Vote[]

  @@map("Answer") // 念のため
  bestForQuestion Question? @relation("BestAnswer") // 念のため
}

model Vote {
  id        Int      @id @default(autoincrement())
  type      String

  answerId  Int      @map("answer_id")
  answer    Answer   @relation(fields: [answerId], references: [id])

  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("Vote") // 念のため
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String
  questions QuestionTag[] // 中間テーブル経由で質問にひもづく

  @@map("Tag")
}

model QuestionTag {
  questionId Int          @map("question_id")
  tagId      Int          @map("tag_id")

  question   Question     @relation(fields: [questionId], references: [id])
  tag        Tag          @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId]) // 複合主キーにする

  @@map("QuestionTag")
}


model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")

  // リレーション
  questionId Int       @map("question_id")
  question   Question  @relation(fields: [questionId], references: [id])

  answerId   Int?      @map("answer_id")
  answer     Answer?   @relation(fields: [answerId], references: [id])

  userId     Int       @map("user_id")
  user       User      @relation(fields: [userId], references: [id])

  @@map("Comment")
}
